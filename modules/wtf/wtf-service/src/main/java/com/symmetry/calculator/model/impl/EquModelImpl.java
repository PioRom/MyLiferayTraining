/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.symmetry.calculator.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import com.symmetry.calculator.model.Equ;
import com.symmetry.calculator.model.EquModel;
import com.symmetry.calculator.model.EquSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Equ service. Represents a row in the &quot;dupa_Equ&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link EquModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EquImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EquImpl
 * @see Equ
 * @see EquModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class EquModelImpl extends BaseModelImpl<Equ> implements EquModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a equ model instance should use the {@link Equ} interface instead.
	 */
	public static final String TABLE_NAME = "dupa_Equ";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "equId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "name", Types.VARCHAR },
			{ "number1", Types.BIGINT },
			{ "number2", Types.BIGINT },
			{ "result", Types.BIGINT },
			{ "typeOfEquation", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("equId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("number1", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("number2", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("result", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("typeOfEquation", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table dupa_Equ (uuid_ VARCHAR(75) null,equId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,name VARCHAR(75) null,number1 LONG,number2 LONG,result LONG,typeOfEquation VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table dupa_Equ";
	public static final String ORDER_BY_JPQL = " ORDER BY equ.equId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY dupa_Equ.equId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.symmetry.calculator.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.symmetry.calculator.model.Equ"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.symmetry.calculator.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.symmetry.calculator.model.Equ"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.symmetry.calculator.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.symmetry.calculator.model.Equ"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long GROUPID_COLUMN_BITMASK = 2L;
	public static final long NAME_COLUMN_BITMASK = 4L;
	public static final long UUID_COLUMN_BITMASK = 8L;
	public static final long EQUID_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Equ toModel(EquSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Equ model = new EquImpl();

		model.setUuid(soapModel.getUuid());
		model.setEquId(soapModel.getEquId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setName(soapModel.getName());
		model.setNumber1(soapModel.getNumber1());
		model.setNumber2(soapModel.getNumber2());
		model.setResult(soapModel.getResult());
		model.setTypeOfEquation(soapModel.getTypeOfEquation());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Equ> toModels(EquSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Equ> models = new ArrayList<Equ>(soapModels.length);

		for (EquSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.symmetry.calculator.service.util.ServiceProps.get(
				"lock.expiration.time.com.symmetry.calculator.model.Equ"));

	public EquModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _equId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEquId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _equId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Equ.class;
	}

	@Override
	public String getModelClassName() {
		return Equ.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("equId", getEquId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("name", getName());
		attributes.put("number1", getNumber1());
		attributes.put("number2", getNumber2());
		attributes.put("result", getResult());
		attributes.put("typeOfEquation", getTypeOfEquation());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long equId = (Long)attributes.get("equId");

		if (equId != null) {
			setEquId(equId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		Long number1 = (Long)attributes.get("number1");

		if (number1 != null) {
			setNumber1(number1);
		}

		Long number2 = (Long)attributes.get("number2");

		if (number2 != null) {
			setNumber2(number2);
		}

		Long result = (Long)attributes.get("result");

		if (result != null) {
			setResult(result);
		}

		String typeOfEquation = (String)attributes.get("typeOfEquation");

		if (typeOfEquation != null) {
			setTypeOfEquation(typeOfEquation);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getEquId() {
		return _equId;
	}

	@Override
	public void setEquId(long equId) {
		_equId = equId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask |= NAME_COLUMN_BITMASK;

		if (_originalName == null) {
			_originalName = _name;
		}

		_name = name;
	}

	public String getOriginalName() {
		return GetterUtil.getString(_originalName);
	}

	@JSON
	@Override
	public long getNumber1() {
		return _number1;
	}

	@Override
	public void setNumber1(long number1) {
		_number1 = number1;
	}

	@JSON
	@Override
	public long getNumber2() {
		return _number2;
	}

	@Override
	public void setNumber2(long number2) {
		_number2 = number2;
	}

	@JSON
	@Override
	public long getResult() {
		return _result;
	}

	@Override
	public void setResult(long result) {
		_result = result;
	}

	@JSON
	@Override
	public String getTypeOfEquation() {
		if (_typeOfEquation == null) {
			return "";
		}
		else {
			return _typeOfEquation;
		}
	}

	@Override
	public void setTypeOfEquation(String typeOfEquation) {
		_typeOfEquation = typeOfEquation;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				Equ.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Equ.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Equ toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Equ)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EquImpl equImpl = new EquImpl();

		equImpl.setUuid(getUuid());
		equImpl.setEquId(getEquId());
		equImpl.setGroupId(getGroupId());
		equImpl.setCompanyId(getCompanyId());
		equImpl.setUserId(getUserId());
		equImpl.setUserName(getUserName());
		equImpl.setCreateDate(getCreateDate());
		equImpl.setModifiedDate(getModifiedDate());
		equImpl.setName(getName());
		equImpl.setNumber1(getNumber1());
		equImpl.setNumber2(getNumber2());
		equImpl.setResult(getResult());
		equImpl.setTypeOfEquation(getTypeOfEquation());

		equImpl.resetOriginalValues();

		return equImpl;
	}

	@Override
	public int compareTo(Equ equ) {
		long primaryKey = equ.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Equ)) {
			return false;
		}

		Equ equ = (Equ)obj;

		long primaryKey = equ.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		EquModelImpl equModelImpl = this;

		equModelImpl._originalUuid = equModelImpl._uuid;

		equModelImpl._originalGroupId = equModelImpl._groupId;

		equModelImpl._setOriginalGroupId = false;

		equModelImpl._originalCompanyId = equModelImpl._companyId;

		equModelImpl._setOriginalCompanyId = false;

		equModelImpl._setModifiedDate = false;

		equModelImpl._originalName = equModelImpl._name;

		equModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Equ> toCacheModel() {
		EquCacheModel equCacheModel = new EquCacheModel();

		equCacheModel.uuid = getUuid();

		String uuid = equCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			equCacheModel.uuid = null;
		}

		equCacheModel.equId = getEquId();

		equCacheModel.groupId = getGroupId();

		equCacheModel.companyId = getCompanyId();

		equCacheModel.userId = getUserId();

		equCacheModel.userName = getUserName();

		String userName = equCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			equCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			equCacheModel.createDate = createDate.getTime();
		}
		else {
			equCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			equCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			equCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		equCacheModel.name = getName();

		String name = equCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			equCacheModel.name = null;
		}

		equCacheModel.number1 = getNumber1();

		equCacheModel.number2 = getNumber2();

		equCacheModel.result = getResult();

		equCacheModel.typeOfEquation = getTypeOfEquation();

		String typeOfEquation = equCacheModel.typeOfEquation;

		if ((typeOfEquation != null) && (typeOfEquation.length() == 0)) {
			equCacheModel.typeOfEquation = null;
		}

		return equCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", equId=");
		sb.append(getEquId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", number1=");
		sb.append(getNumber1());
		sb.append(", number2=");
		sb.append(getNumber2());
		sb.append(", result=");
		sb.append(getResult());
		sb.append(", typeOfEquation=");
		sb.append(getTypeOfEquation());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append("com.symmetry.calculator.model.Equ");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>equId</column-name><column-value><![CDATA[");
		sb.append(getEquId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>number1</column-name><column-value><![CDATA[");
		sb.append(getNumber1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>number2</column-name><column-value><![CDATA[");
		sb.append(getNumber2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>result</column-name><column-value><![CDATA[");
		sb.append(getResult());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>typeOfEquation</column-name><column-value><![CDATA[");
		sb.append(getTypeOfEquation());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Equ.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Equ.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _equId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _name;
	private String _originalName;
	private long _number1;
	private long _number2;
	private long _result;
	private String _typeOfEquation;
	private long _columnBitmask;
	private Equ _escapedModel;
}